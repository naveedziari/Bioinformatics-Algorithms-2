# -*- coding: utf-8 -*-
"""efficient string comparison part 4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oBBwOzPDbve98obYiCOM5CTtTVcVxAKa
"""

# Problem 1 - Implement the Needleman-Wunsch algorithm 
# to compute the optimal alignment for a pair of sequences

import numpy

class NeedlemanWunsch(object):
    def __init__(self, string1, string2, gapScore=-2, matchScore=3, 
                 mismatchScore=-3):
        """ Finds an optimal global alignment of two strings.  
        """
        
        self.editMatrix = numpy.zeros(shape=[len(string1)+1, len(string2)+1], dtype=int) # Numpy matrix representing edit matrix
        # Preinitialized to have zero values
        
        for i in range(1,(len(string1)+1)):
          self.editMatrix[i][0] = gapScore + self.editMatrix[i-1][0]
        for j in range(1,(len(string2)+1)):
          self.editMatrix[0][j] = gapScore + self.editMatrix[0][j-1]
        
        for i in range(1,len(string1)):
          for j in range(1,len(string2)):
            if string1[i] == string2[j]:
              self.editMatrix[i][j] = self.editMatrix[i-1][j-1]
            else:
              self.editMatrix[i][j] = min(self.editMatrix[i-1][j]+gapScore,
                                         self.editMatrix[i][j-1]+gapScore,
                                         self.editMatrix[i-1][j-1]+matchScore)
        
        print(self.editMatrix)
        
        
        
        
     
                
    def getAlignmentScore(self):
        """ Return the alignment score
        """
        
        # Code to complete
                    
                
    def getAlignment(self):
        """ Returns an optimal global alignment of two strings. Aligned
        is returned as an ordered list of aligned pairs.
        
        e.g. For the two strings GATTACA and TACA an global alignment is
        is GATTACA
           ---TACA
        This alignment would be returned as:
        
        [(3, 0), (4, 1), (5, 2), (6, 3)]
        """
        
        alignedPairs = []
        
        # Code to complete - generated by traceback through matrix to generate aligned pairs
        
        return alignedPairs
      
string1 = "GATTACA"
string2 =   "TACA"

needlemanWunsch = NeedlemanWunsch(string1, string2)

# Test the edit matrix get built right

needlemanWunsch.editMatrix == [[  0,  -2,  -4,  -6,  -8],
       [ -2,  -3,  -5,  -7,  -9],
       [ -4,  -5,   0,  -2,  -4],
       [ -6,  -1,  -2,  -3,  -5],
       [ -8,  -3,  -4,  -5,  -6],
       [-10,  -5,   0,  -2,  -2],
       [-12,  -7,  -2,   3,   1],
       [-14,  -9,  -4,   1,   6]]

# Test the score function

needlemanWunsch.getAlignmentScore() == 6

# Test the get alignment function

needlemanWunsch.getAlignment() == [(3, 0), (4, 1), (5, 2), (6, 3)]